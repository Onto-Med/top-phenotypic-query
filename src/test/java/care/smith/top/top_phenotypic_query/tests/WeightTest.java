package care.smith.top.top_phenotypic_query.tests;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDateTime;
import java.util.Set;

import org.junit.jupiter.api.Test;

import care.smith.top.model.Entity;
import care.smith.top.model.Phenotype;
import care.smith.top.top_phenotypic_query.result.ResultSet;
import care.smith.top.top_phenotypic_query.result.SubjectPhenotypes;
import care.smith.top.top_phenotypic_query.util.DateUtil;
import care.smith.top.top_phenotypic_query.util.Values;
import care.smith.top.top_phenotypic_query.util.builder.Phe;
import care.smith.top.top_phenotypic_query.util.builder.Que;
import care.smith.top.top_phenotypic_query.util.builder.Res;

public class WeightTest {

  private static final String CONFIG = "config/Weight_SQL_Adapter.yml";

  private static Phenotype weight = new Phe("weight", "http://loinc.org", "3141-9").number().get();
  private static Phenotype heavy = new Phe("heavy").restriction(weight, Res.ge(100)).get();
  private static Entity[] entities = {weight, heavy};

  private static final String LS = System.lineSeparator();
  private static final String CREATE_SBJ =
      "CREATE TABLE subject ("
          + LS
          + "    subject_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,"
          + LS
          + "    birth_date timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,"
          + LS
          + "    sex        text NOT NULL,"
          + LS
          + "    PRIMARY KEY (subject_id)"
          + LS
          + ")";
  private static final String CREATE_ASM =
      "CREATE TABLE assessment1 ("
          + LS
          + "    assessment_id bigint                   NOT NULL GENERATED BY DEFAULT AS IDENTITY,"
          + LS
          + "    subject_id    bigint                   NOT NULL REFERENCES subject,"
          + LS
          + "    created_at    timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,"
          + LS
          + "    weight        numeric,"
          + LS
          + "    PRIMARY KEY (assessment_id)"
          + LS
          + ")";

  @Test
  public void test() throws InstantiationException {
    ResultSet rs =
        new Que(CONFIG, entities)
            .inc(heavy)
            .pro(weight)
            .executeSql(CREATE_SBJ, CREATE_ASM, insertSubjects(), insertAssesments())
            .execute();

    assertEquals(Set.of("2", "4"), rs.getSubjectIds());

    SubjectPhenotypes phes2 = rs.getPhenotypes("2");
    assertEquals(Set.of("weight"), phes2.getPhenotypeNames());
    assertEquals(
        Double.valueOf(110), Values.getNumberValue(phes2.getValues("weight", null).get(0)));

    SubjectPhenotypes phes4 = rs.getPhenotypes("4");
    assertEquals(Set.of("weight"), phes4.getPhenotypeNames());
    assertEquals(
        Double.valueOf(180), Values.getNumberValue(phes4.getValues("weight", null).get(0)));
  }

  private String insertSubjects() {
    LocalDateTime now = LocalDateTime.now();
    StringBuffer sb = new StringBuffer("INSERT INTO subject VALUES").append(LS);
    sb.append(insertSbj(1, now.minusYears(20), "female")).append(",").append(LS);
    sb.append(insertSbj(2, now.minusYears(30), "female")).append(",").append(LS);
    sb.append(insertSbj(3, now.minusYears(40), "male")).append(",").append(LS);
    sb.append(insertSbj(4, now.minusYears(50), "male")).append(",").append(LS);
    sb.append(insertSbj(5, now.minusYears(60), "female"));
    return sb.toString();
  }

  private String insertSbj(Integer id, LocalDateTime bd, String sex) {
    return bracket(String.join(", ", id.toString(), quote(DateUtil.format(bd)), quote(sex)));
  }

  private String insertAssesments() {
    LocalDateTime now = LocalDateTime.now();
    StringBuffer sb =
        new StringBuffer("INSERT INTO assessment1 (subject_id, created_at, weight) VALUES")
            .append(LS);
    sb.append(insertAsm(1, now.minusDays(3), 90)).append(",").append(LS);
    sb.append(insertAsm(2, now.minusMonths(2), 110)).append(",").append(LS);
    sb.append(insertAsm(3, now.minusYears(2), 65)).append(",").append(LS);
    sb.append(insertAsm(4, now.minusDays(1), 180)).append(",").append(LS);
    sb.append(insertAsm(5, now.minusMonths(5), 50));

    return sb.toString();
  }

  private String insertAsm(Integer sbjId, LocalDateTime date, Integer crea) {
    return bracket(
        String.join(", ", sbjId.toString(), quote(DateUtil.format(date)), crea.toString()));
  }

  private String quote(String s) {
    return "'" + s + "'";
  }

  private String bracket(String s) {
    return "(" + s + ")";
  }
}

package care.smith.top.top_phenotypic_query.tests.default_sql_writer;

import care.smith.top.top_phenotypic_query.adapter.config.DataAdapterConfig;
import care.smith.top.top_phenotypic_query.util.DateUtil;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DefaultSqlWriter {

  private Connection con;

  private static final String CREATE_SBJ =
      "CREATE TABLE subject (\r\n"
          + "    subject_id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,\r\n"
          + "    birth_date timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n"
          + "    sex        text   NOT NULL,\r\n"
          + "    PRIMARY KEY (subject_id)\r\n"
          + ")";

  private static final String CREATE_PHE =
      "CREATE TABLE phenotype (\r\n"
          + "    phenotype_id    bigint                   NOT NULL GENERATED BY DEFAULT AS IDENTITY,\r\n"
          + "    subject_id      bigint                   NOT NULL REFERENCES subject,\r\n"
          + "    created_at      timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n"
          + "    code_system     text   NOT NULL,\r\n"
          + "    code            text   NOT NULL,\r\n"
          + "    unit            text,\r\n"
          + "    number_value    numeric(20,2),\r\n"
          + "    text_value      text,\r\n"
          + "    date_time_value timestamp,\r\n"
          + "    boolean_value   boolean,\r\n"
          + "    PRIMARY KEY (phenotype_id)\r\n"
          + ")";

  private Logger log = LoggerFactory.getLogger(DefaultSqlWriter.class);

  public DefaultSqlWriter(DataAdapterConfig config) {
    try {
      con =
          DriverManager.getConnection(
              config.getConnectionAttribute("url"),
              config.getConnectionAttribute("user"),
              config.getConnectionAttribute("password"));
    } catch (SQLException e) {
      e.printStackTrace();
    }

    execute("DROP ALL OBJECTS");
    execute(CREATE_SBJ);
    execute(CREATE_PHE);
  }

  public SbjPhe insertSbj(Integer id, LocalDateTime bd, String sex) {
    return insertSbj(id, DateUtil.format(bd), sex);
  }

  public SbjPhe insertSbj(Integer id, String bd, String sex) {
    execute(
        "INSERT INTO subject VALUES ("
            + String.join(", ", id.toString(), quote(bd), quote(sex))
            + ")");
    return new SbjPhe(id);
  }

  private String quote(String s) {
    return "'" + s + "'";
  }

  private void execute(String sql) {
    log.debug("execute sql statement:{}{}", System.lineSeparator(), sql);
    try {
      Statement stmt = con.createStatement();
      stmt.execute(sql);
      stmt.close();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  public void close() {
    try {
      con.close();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  public void printSbj() {
    print("subject");
  }

  public void printPhe() {
    print("phenotype");
  }

  private void print(String table) {
    try {
      Statement st = con.createStatement();
      ResultSet rs = st.executeQuery("SELECT * FROM " + table);
      ResultSetMetaData rsmd = rs.getMetaData();
      int columnsNumber = rsmd.getColumnCount();
      while (rs.next()) {
        for (int i = 1; i <= columnsNumber; i++) System.out.print(rs.getString(i) + " | ");
        System.out.println();
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    System.out.println();
  }

  public class SbjPhe {

    private Integer sbjId;

    private SbjPhe(Integer sbjId) {
      this.sbjId = sbjId;
    }

    public SbjPhe insertPhe(
        LocalDateTime date, String codeSystem, String code, String unit, Number value) {
      return insertPhe(DateUtil.format(date), codeSystem, code, unit, value);
    }

    public SbjPhe insertPhe(
        String date, String codeSystem, String code, String unit, Number value) {
      execute(
          "INSERT INTO phenotype (subject_id, created_at, code_system, code, unit, number_value) VALUES ("
              + String.join(
                  ", ",
                  sbjId.toString(),
                  quote(date),
                  quote(codeSystem),
                  quote(code),
                  quote(unit),
                  value.toString())
              + ")");
      return this;
    }

    public SbjPhe insertPhe(LocalDateTime date, String codeSystem, String code, Number value) {
      return insertPhe(DateUtil.format(date), codeSystem, code, value);
    }

    public SbjPhe insertPhe(String date, String codeSystem, String code, Number value) {
      execute(
          "INSERT INTO phenotype (subject_id, created_at, code_system, code, number_value) VALUES ("
              + String.join(
                  ", ",
                  sbjId.toString(),
                  quote(date),
                  quote(codeSystem),
                  quote(code),
                  value.toString())
              + ")");
      return this;
    }

    public SbjPhe insertPhe(LocalDateTime date, String codeSystem, String code, String value) {
      return insertPhe(DateUtil.format(date), codeSystem, code, value);
    }

    public SbjPhe insertPhe(String date, String codeSystem, String code, String value) {
      execute(
          "INSERT INTO phenotype (subject_id, created_at, code_system, code, text_value) VALUES ("
              + String.join(
                  ", ", sbjId.toString(), quote(date), quote(codeSystem), quote(code), quote(value))
              + ")");
      return this;
    }
  }
}
